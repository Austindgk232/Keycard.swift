import XCTest
@testable import Keycard

final class KeycardTests: XCTestCase {
    func testApplicationInfo() {
        var data: [UInt8] = [0xa4, 0x61, 0x8f, 0x10, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x80, 0x41, 0x04, 0x7b, 0x83, 0xad, 0x6a, 0xfb, 0x12, 0x09, 0xf3, 0xc8, 0x2e, 0xbe, 0xb0, 0x8c, 0x0c, 0x5f, 0xa9, 0xbf, 0x67, 0x24, 0x54, 0x85, 0x06, 0xf2, 0xfb, 0x4f, 0x99, 0x1e, 0x22, 0x87, 0xa7, 0x70, 0x90, 0x17, 0x73, 0x16, 0xca, 0x82, 0xb0, 0xbd, 0xf7, 0x0c, 0xd9, 0xde, 0xe1, 0x45, 0xc3, 0x00, 0x2c, 0x0d, 0xa1, 0xd9, 0x26, 0x26, 0x44, 0x98, 0x75, 0x97, 0x2a, 0x27, 0x80, 0x7b, 0x73, 0xb4, 0x2e, 0x02, 0x02, 0x02, 0x01, 0x02, 0x01, 0x03, 0x8e, 0x00, 0x8d, 0x01, 0x03]
        var appInfo = try! ApplicationInfo(data)
        XCTAssertTrue(appInfo.initializedCard)
        XCTAssertEqual(appInfo.appVersionString, "2.1")
        XCTAssertFalse(appInfo.hasMasterKey)
        XCTAssertTrue(appInfo.hasSecureChannelCapability)
        XCTAssertTrue(appInfo.hasKeyManagementCapability)
        XCTAssertFalse(appInfo.hasCredentialsManagementCapability)
        XCTAssertFalse(appInfo.hasNDEFCapability)
        XCTAssertEqual(appInfo.freePairingSlots, 3)
        XCTAssertEqual(appInfo.instanceUID, [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f])
        XCTAssertEqual(appInfo.keyUID, [])
        
        data = [0xa4, 0x81, 0x81, 0x8f, 0x10, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x80, 0x41, 0x04, 0x7b, 0x83, 0xad, 0x6a, 0xfb, 0x12, 0x09, 0xf3, 0xc8, 0x2e, 0xbe, 0xb0, 0x8c, 0x0c, 0x5f, 0xa9, 0xbf, 0x67, 0x24, 0x54, 0x85, 0x06, 0xf2, 0xfb, 0x4f, 0x99, 0x1e, 0x22, 0x87, 0xa7, 0x70, 0x90, 0x17, 0x73, 0x16, 0xca, 0x82, 0xb0, 0xbd, 0xf7, 0x0c, 0xd9, 0xde, 0xe1, 0x45, 0xc3, 0x00, 0x2c, 0x0d, 0xa1, 0xd9, 0x26, 0x26, 0x44, 0x98, 0x75, 0x97, 0x2a, 0x27, 0x80, 0x7b, 0x73, 0xb4, 0x2e, 0x02, 0x02, 0x02, 0x01, 0x02, 0x01, 0x03, 0x8e, 0x20, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x8d, 0x01, 0x0f]
        
        appInfo = try! ApplicationInfo(data)
        XCTAssertTrue(appInfo.hasMasterKey)
        XCTAssertTrue(appInfo.hasCredentialsManagementCapability)
        XCTAssertTrue(appInfo.hasNDEFCapability)
        XCTAssertEqual(appInfo.keyUID, [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f])
        
        data = [0x80, 0x00]
        appInfo = try! ApplicationInfo(data)
        XCTAssertFalse(appInfo.initializedCard)
        XCTAssertFalse(appInfo.hasSecureChannelCapability)
        XCTAssertTrue(appInfo.hasCredentialsManagementCapability)
        
        data = [0x80, 0x41, 0x04, 0x7b, 0x83, 0xad, 0x6a, 0xfb, 0x12, 0x09, 0xf3, 0xc8, 0x2e, 0xbe, 0xb0, 0x8c, 0x0c, 0x5f, 0xa9, 0xbf, 0x67, 0x24, 0x54, 0x85, 0x06, 0xf2, 0xfb, 0x4f, 0x99, 0x1e, 0x22, 0x87, 0xa7, 0x70, 0x90, 0x17, 0x73, 0x16, 0xca, 0x82, 0xb0, 0xbd, 0xf7, 0x0c, 0xd9, 0xde, 0xe1, 0x45, 0xc3, 0x00, 0x2c, 0x0d, 0xa1, 0xd9, 0x26, 0x26, 0x44, 0x98, 0x75, 0x97, 0x2a, 0x27, 0x80, 0x7b, 0x73, 0xb4, 0x2e]
        appInfo = try! ApplicationInfo(data)
        XCTAssertFalse(appInfo.initializedCard)
        XCTAssertTrue(appInfo.hasSecureChannelCapability)
        XCTAssertTrue(appInfo.hasCredentialsManagementCapability)

    }

    static var allTests = [
        ("testApplicationInfo", testApplicationInfo),
    ]
}
